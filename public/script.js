document.addEventListener("DOMContentLoaded", () => {
    const registerBtn = document.getElementById('register');
    const loginBtn = document.getElementById('login');
    const depositBtn = document.getElementById('deposit');
    const withdrawBtn = document.getElementById('withdraw');
    const balanceSpan = document.getElementById('balance');

    async function fetchAPI(url, method, body) {
        try {
            const response = await fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });

            const data = await response.json();
            if (data.error) throw new Error(data.error);
            return data;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ API: ${error.message}`);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
            return null;
        }
    }

    async function updateBalance(email) {
        const data = await fetchAPI('/getBalance', 'POST', { email });
        if (data && data.balance !== undefined) {
            balanceSpan.innerText = data.balance.toFixed(2);
        }
    }

    // üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (registerBtn) {
        registerBtn.addEventListener('click', async () => {
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();

            if (!email || !password) {
                alert("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å!");
                return;
            }

            const data = await fetchAPI('/register', 'POST', { email, password });
            if (data) {
                alert("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
            }
        });
    }

    // üîπ –í—Ö–æ–¥
    if (loginBtn) {
        loginBtn.addEventListener('click', async () => {
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();

            if (!email || !password) {
                alert("–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å!");
                return;
            }

            const data = await fetchAPI('/login', 'POST', { email, password });
            if (data) {
                localStorage.setItem('userEmail', email);
                alert("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                updateBalance(email);
            }
        });
    }

    // üîπ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if (depositBtn) {
        depositBtn.addEventListener('click', async () => {
            const email = localStorage.getItem('userEmail');
            if (!email) {
                alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç!");
                return;
            }

            const amount = parseFloat(prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ($1 - $100):"));
            if (isNaN(amount) || amount < 1 || amount > 100) {
                alert("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç $1 –¥–æ $100.");
                return;
            }

            const data = await fetchAPI('/deposit', 'POST', { email, amount });
            if (data) {
                alert(`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${data.clientSecret}`);
                updateBalance(email);
            }
        });
    }

    // üîπ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    if (withdrawBtn) {
        withdrawBtn.addEventListener('click', async () => {
            const email = localStorage.getItem('userEmail');
            if (!email) {
                alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç!");
                return;
            }

            const amount = parseFloat(prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"));
            if (isNaN(amount) || amount <= 0) {
                alert("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.");
                return;
            }

            const data = await fetchAPI('/withdraw', 'POST', { email, amount });
            if (data) {
                alert(data.message);
                updateBalance(email);
            }
        });
    }

    // üîπ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    const savedEmail = localStorage.getItem('userEmail');
    if (savedEmail) {
        updateBalance(savedEmail);
    }

    // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    const buttons = document.querySelectorAll(".game-card button");
    buttons.forEach(button => {
        button.addEventListener("click", () => {
            alert(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: ${button.parentElement.querySelector("h3").innerText}`);
        });
    });
});
